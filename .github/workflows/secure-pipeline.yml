name: Secure CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  packages: write

jobs:
  # 1. 原始碼安全掃描 (SAST)
  sast-scan:
    runs-on: ubuntu-latest
    name: SAST - Semgrep 掃描
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout 代碼
        uses: actions/checkout@v4

      - name: 執行 Semgrep 掃描
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
          publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
          publishDeployment: ${{ github.ref == 'refs/heads/main' && '1' || '0' }}

      - name: 執行 Semgrep 掃描（生成 SARIF）
        if: always()
        run: |
          pip install semgrep
          semgrep --config=auto --sarif --output=semgrep-results.sarif . || true

      - name: 檢查並準備 SARIF 檔案
        if: always()
        run: |
          if [ -f "semgrep-results.sarif" ]; then
            echo "✅ SARIF 檔案已生成"
            cat semgrep-results.sarif
          else
            echo "⚠️  SARIF 檔案未生成，建立空白檔案"
            echo '{"version":"2.1.0","$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","runs":[{"tool":{"driver":{"name":"Semgrep","informationUri":"https://semgrep.dev/"}},"results":[]}]}' > semgrep-results.sarif
          fi

      - name: 上傳 SAST 掃描結果
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep-results.sarif

  # 2. 依賴套件漏洞檢測 (SCA)（僅在存在依賴檔案時執行）
  sca-scan:
    runs-on: ubuntu-latest
    name: SCA - 依賴漏洞檢測
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout 代碼
        uses: actions/checkout@v4

      - name: 檢查是否存在依賴管理檔案
        id: check-deps
        run: |
          echo "檢查專案中是否存在依賴管理檔案..."
          
          # 檢查常見的依賴管理檔案
          if find . -type f \( -name "package.json" -o -name "package-lock.json" -o -name "yarn.lock" \
             -o -name "pom.xml" -o -name "build.gradle" -o -name "requirements.txt" \
             -o -name "Gemfile" -o -name "composer.json" \) \
             -not -path "./.git/*" -not -path "./node_modules/*" | grep -q .; then
            echo "has-deps=true" >> $GITHUB_OUTPUT
            echo "✅ 發現依賴管理檔案，將執行掃描"
          else
            echo "has-deps=false" >> $GITHUB_OUTPUT
            echo "ℹ️  未發現依賴管理檔案，跳過 SCA 掃描"
            echo "   本專案為純靜態網頁，無需依賴套件檢測"
          fi

      - name: 執行 OWASP Dependency-Check
        if: steps.check-deps.outputs.has-deps == 'true'
        uses: dependency-check/Dependency-Check_Action@main
        id: depcheck
        with:
          project: 'MyProject'
          path: '.'
          format: 'SARIF'
          args: >
            --enableExperimental
            --out reports

      - name: 準備 SARIF 檔案
        if: always()
        run: |
          mkdir -p reports
          if [ "${{ steps.check-deps.outputs.has-deps }}" == "false" ]; then
            echo "建立空白 SARIF 檔案（無依賴檔案需掃描）"
            echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"OWASP Dependency-Check","informationUri":"https://owasp.org/www-project-dependency-check/"}},"results":[]}]}' > reports/dependency-check-report.sarif
          elif [ ! -f "reports/dependency-check-report.sarif" ]; then
            echo "警告：SARIF 檔案未找到，建立空白檔案"
            echo '{"version":"2.1.0","runs":[]}' > reports/dependency-check-report.sarif
          fi

      - name: 上傳 SCA 結果
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: reports/dependency-check-report.sarif

  # 3. 容器映像安全掃描（僅在存在容器相關檔案時執行）
  container-scan:
    runs-on: ubuntu-latest
    name: 容器映像掃描 - Trivy
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout 代碼
        uses: actions/checkout@v4

      - name: 檢查是否存在容器相關檔案
        id: check-container
        run: |
          echo "檢查專案中是否存在容器相關檔案..."
          
          # 檢查 Dockerfile、docker-compose 等檔案
          if find . -type f \( -name "Dockerfile*" -o -name "docker-compose*.yml" -o -name "docker-compose*.yaml" \) \
             -not -path "./.git/*" | grep -q .; then
            echo "has-container=true" >> $GITHUB_OUTPUT
            echo "✅ 發現容器相關檔案，將執行建置與掃描"
          else
            echo "has-container=false" >> $GITHUB_OUTPUT
            echo "ℹ️  未發現容器相關檔案，跳過容器掃描"
            echo "   本專案為純靜態網頁，無需容器映像檢測"
          fi

      - name: 設定 Docker Buildx
        if: steps.check-container.outputs.has-container == 'true'
        uses: docker/setup-buildx-action@v3

      - name: 建置 Docker Image
        if: steps.check-container.outputs.has-container == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: |
            tic-tac-toe:${{ github.sha }}
            tic-tac-toe:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 執行 Trivy 容器映像掃描
        if: steps.check-container.outputs.has-container == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          image-ref: 'tic-tac-toe:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: 執行 Trivy 容器映像掃描（表格輸出）
        if: steps.check-container.outputs.has-container == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          image-ref: 'tic-tac-toe:${{ github.sha }}'
          format: 'table'

      - name: 準備 SARIF 檔案
        if: always()
        run: |
          if [ "${{ steps.check-container.outputs.has-container }}" == "false" ]; then
            echo "建立空白 SARIF 檔案（無容器檔案需掃描）"
            echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"Trivy","informationUri":"https://aquasecurity.github.io/trivy/"}},"results":[]}]}' > trivy-results.sarif
          elif [ ! -f "trivy-results.sarif" ]; then
            echo "警告：SARIF 檔案未找到，建立空白檔案"
            echo '{"version":"2.1.0","runs":[]}' > trivy-results.sarif
          fi

      - name: 上傳容器掃描結果
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif

  # 4. 基礎設施即程式碼 (IaC) 安全檢查（僅在存在 IaC 檔案時執行）
  iac-scan:
    runs-on: ubuntu-latest
    name: IaC 安全檢查 - Checkov
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout 代碼
        uses: actions/checkout@v4

      - name: 檢查是否存在 IaC 檔案
        id: check-iac
        run: |
          echo "檢查專案中是否存在 IaC 相關檔案..."
          
          # 檢查 Terraform、CloudFormation、Kubernetes 等 IaC 檔案
          if find . -type f \( -name "*.tf" -o -name "*.tfvars" -o -name "*.yaml" -o -name "*.yml" \) \
             -not -path "./.git/*" \
             -not -path "./.github/workflows/*" \
             -not -path "./node_modules/*" | grep -q .; then
            echo "has-iac=true" >> $GITHUB_OUTPUT
            echo "✅ 發現 IaC 相關檔案，將執行掃描"
          else
            echo "has-iac=false" >> $GITHUB_OUTPUT
            echo "ℹ️  未發現 IaC 相關檔案，跳過 IaC 掃描"
            echo "   本專案為純前端應用，不需要 IaC 安全檢查"
          fi

      - name: 設定 Python
        if: steps.check-iac.outputs.has-iac == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 安裝 Checkov
        if: steps.check-iac.outputs.has-iac == 'true'
        run: pip install checkov

      - name: 執行 Checkov IaC 掃描
        if: steps.check-iac.outputs.has-iac == 'true'
        run: |
          checkov -d . \
            --framework terraform,cloudformation,kubernetes \
            --output sarif \
            --output-file-path . \
            --soft-fail || true

      - name: 準備 SARIF 檔案
        if: always()
        run: |
          if [ "${{ steps.check-iac.outputs.has-iac }}" == "false" ]; then
            echo "建立空白 SARIF 檔案（無 IaC 檔案需掃描）"
            echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"Checkov","informationUri":"https://www.checkov.io/"}},"results":[]}]}' > results_sarif.sarif
          elif [ ! -f "results_sarif.sarif" ]; then
            echo "警告：SARIF 檔案未找到，建立空白檔案"
            echo '{"version":"2.1.0","runs":[]}' > results_sarif.sarif
          fi

      - name: 上傳 IaC 掃描結果
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: results_sarif.sarif

  # 5. Secret 掃描
  secret-scan:
    runs-on: ubuntu-latest
    name: Secret 掃描 - Gitleaks
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout 代碼
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 執行 Gitleaks 掃描
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_ENABLE_SUMMARY: true

  # 6. SonarCloud 程式碼品質與安全檢測
  sonarqube-scan:
    runs-on: ubuntu-latest
    name: SonarCloud 檢測
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout 代碼
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 設定 JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 設定 SonarCloud 掃描
        # 改為使用 sonarqube-scan-action v5，並在出錯時不讓整個 job 失敗（避免 Automatic Analysis 衝突導致 workflow 失敗）
        uses: SonarSource/sonarqube-scan-action@v5
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=jonathantsaitw
            -Dsonar.projectKey=JonathanTsaiTW_202510_lab1
            -Dsonar.sources=.
            -Dsonar.host.url=https://sonarcloud.io

      - name: 將 SonarCloud 結果轉換為 SARIF
        if: always()
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          PROJECT_KEY: ${{ github.repository_owner }}_${{ github.event.repository.name }}
        run: |
          python3 - <<'PY'
          import os, sys, json, base64, urllib.request, urllib.parse
          token = os.environ.get('SONAR_TOKEN')
          project_key = os.environ.get('PROJECT_KEY')
          def make_empty():
              return {"version":"2.1.0","runs":[{"tool":{"driver":{"name":"SonarCloud","informationUri":"https://sonarcloud.io"}},"results":[]}]}
          if not project_key:
              open("sonar-sarif.json","w").write(json.dumps(make_empty()))
              sys.exit(0)
          url = "https://sonarcloud.io/api/issues/search?componentKeys=" + urllib.parse.quote(project_key) + "&ps=500"
          req = urllib.request.Request(url)
          if token:
              auth = base64.b64encode((token + ":").encode()).decode()
              req.add_header("Authorization", "Basic " + auth)
          try:
              with urllib.request.urlopen(req, timeout=30) as resp:
                  data = json.load(resp)
          except Exception as e:
              print("Warning: failed to fetch SonarCloud issues:", e, file=sys.stderr)
              open("sonar-sarif.json","w").write(json.dumps(make_empty()))
              sys.exit(0)
          issues = data.get("issues", [])
          results = []
          for iss in issues:
              comp = iss.get("component") or ""
              # 如果 component 有冒號 (e.g. "Proj:app/script.js")，取冒號後面部分作為檔案相對路徑
              if ':' in comp and not comp.startswith(('http://','https://','file:','/')):
                  comp = comp.split(':',1)[1]
              comp = comp.lstrip('/')
              # fallback to rule component or empty
              uri = comp or ""
              # 確保 line 為整數
              try:
                  line = int(iss.get("line")) if iss.get("line") else 1
              except:
                  line = 1
              loc = {
                "physicalLocation": {
                  "artifactLocation": {"uri": uri},
                  "region": {"startLine": line}
                }
              }
              level = "note"
              sev = (iss.get("severity") or "").upper()
              if sev in ("BLOCKER","CRITICAL","MAJOR"):
                  level = "error"
              elif sev in ("MINOR","INFO"):
                  level = "note"
              r = {
                "message": {"text": iss.get("message")},
                "ruleId": iss.get("rule"),
                "level": level,
                "locations": [loc]
              }
              results.append(r)
          sarif = {"version":"2.1.0","runs":[{"tool":{"driver":{"name":"SonarCloud","informationUri":"https://sonarcloud.io"}},"results":results}]}
          open("sonar-sarif.json","w").write(json.dumps(sarif))
          print(f"Wrote sonar-sarif.json with {len(results)} results")
          PY

      - name: 上傳 SonarCloud SARIF 結果
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: sonar-sarif.json
          category: sonarcloud

      - name: SonarCloud 品質閘道檢查
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        timeout-minutes: 5

  # 7. 安全掃描結果總結
  security-summary:
    runs-on: ubuntu-latest
    name: 安全掃描總結
    needs: [sast-scan, sca-scan, container-scan, iac-scan, secret-scan, sonarqube-scan]
    if: always()
    outputs:
      all-passed: ${{ steps.check-status.outputs.all-passed }}
    steps:
      - name: 檢查掃描狀態
        id: check-status
        run: |
          echo "==================================="
          echo "🔒 安全 CI/CD Pipeline 執行完成"
          echo "==================================="
          echo ""
          echo "📋 掃描項目狀態："
          echo "1. SAST (原始碼安全掃描) - Semgrep: ${{ needs.sast-scan.result }}"
          echo "2. SCA (依賴漏洞檢測) - Dependency-Check: ${{ needs.sca-scan.result }}"
          echo "3. 容器映像掃描 - Trivy: ${{ needs.container-scan.result }}"
          echo "4. IaC 安全檢查 - Checkov: ${{ needs.iac-scan.result }}"
          echo "5. Secret 掃描 - Gitleaks: ${{ needs.secret-scan.result }}"
          echo "6. SonarQube 檢測: ${{ needs.sonarqube-scan.result }}"
          echo ""
          echo "📊 詳細結果請查看："
          echo "   - Security 標籤 → Code scanning alerts"
          echo "   - Actions 標籤 → 各個 Job 的詳細日誌"
          echo "   - SonarQube 儀表板"
          echo ""
          
          # 檢查是否有失敗的 job
          if [[ "${{ needs.sast-scan.result }}" == "failure" ]] || \
             [[ "${{ needs.sca-scan.result }}" == "failure" ]] || \
             [[ "${{ needs.container-scan.result }}" == "failure" ]] || \
             [[ "${{ needs.iac-scan.result }}" == "failure" ]] || \
             [[ "${{ needs.secret-scan.result }}" == "failure" ]] || \
             [[ "${{ needs.sonarqube-scan.result }}" == "failure" ]]; then
            echo "⚠️  警告：部分掃描發現問題，請檢查詳細報告"
            echo "all-passed=false" >> $GITHUB_OUTPUT
          else
            echo "✅ 所有安全掃描已完成"
            echo "all-passed=true" >> $GITHUB_OUTPUT
          fi

  # 8. 建置並推送 Docker Image 到 GitHub Container Registry
  build-push-image:
    runs-on: ubuntu-latest
    name: 建置並推送 Docker Image
    needs: [security-summary]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout 代碼
        uses: actions/checkout@v4

      - name: 設定 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登入 GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 提取 Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 建置並推送 Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 推送完成通知
        run: |
          echo "🎉 Docker Image 已成功推送到 GitHub Container Registry"
          echo ""
          echo "📦 Image 標籤："
          echo "${{ steps.meta.outputs.tags }}"
          echo ""
          echo "🔗 查看 Package："
          echo "https://github.com/${{ github.repository }}/pkgs/container/$(basename ${{ github.repository }})"

  # 9. 建置網站
  build:
    runs-on: ubuntu-latest
    name: 建置網站
    needs: [security-summary]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout 代碼
        uses: actions/checkout@v4

      - name: 設定 Pages
        uses: actions/configure-pages@v4

      - name: 上傳 artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './app'

  # 10. 部署到 GitHub Pages
  deploy:
    runs-on: ubuntu-latest
    name: 部署到 GitHub Pages
    needs: [build, security-summary]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: 部署到 GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: 部署完成通知
        run: |
          echo "🎉 部署成功！"
          echo "網站 URL: ${{ steps.deployment.outputs.page_url }}"
          echo ""
          echo "安全狀態: ${{ needs.security-summary.outputs.all-passed }}"